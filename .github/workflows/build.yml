name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Run integration tests
        run: mvn verify -Pintegration-tests

      - name: Run code quality checks
        run: mvn clean verify sonar:sonar -Dsonar.projectKey=my-project -Dsonar.organization=my-org -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Build Docker Image
        run: docker build -t your-docker-username/your-application-name:${{ github.sha }} .

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image to Docker Hub
        run: docker push your-docker-username/your-application-name:${{ github.sha }}

  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'

      - name: Test with Maven
        run: mvn test

      - name: Run integration tests
        run: mvn verify -Pintegration-tests

      - name: Run code quality checks
        run: mvn clean verify sonar:sonar -Dsonar.projectKey=my-project -Dsonar.organization=my-org -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Build Docker Image
        run: docker build -t your-docker-username/your-application-name:${{ github.sha }} .

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image to Docker Hub
        run: docker push your-docker-username/your-application-name:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build, test]

    steps:
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: your-aws-region

        - name: Deploy to Amazon ECS
          run: |
            aws ecr get-login-password --region your-aws-region | docker login --username AWS --password-stdin your-account-id.dkr.ecr.your-aws-region.amazonaws.com
            
            docker tag your-docker-image:latest your-account-id.dkr.ecr.your-aws-region.amazonaws.com/your-repository-name:latest
            
            docker push your-account-id.dkr.ecr.your-aws-region.amazonaws.com/your-repository-name:latest
            
            ecs-cli configure --cluster your-cluster-name --region your-aws-region
            
            ecs-cli compose --file docker-compose.yml service up